<templateSet group="Dennis">
  <template name="denNoDataView" value="public static void showNoData(View view, int visibility) {&#10;    if (view != null) {&#10;        view.setVisibility(visibility);&#10;        if(visibility == View.VISIBLE) {&#10;            TextView tvNoData = view.findViewById(R.id.tv_no_data);&#10;            if (view.findViewById(R.id.player_progressbar) != null) {&#10;                view.findViewById(R.id.player_progressbar).setVisibility(View.GONE);&#10;            }&#10;            if (tvNoData != null) {&#10;                tvNoData.setVisibility(View.VISIBLE);&#10;                if (SupportUtil.isNotConnected(view.getContext())) {&#10;                    tvNoData.setText(AppConstant.NO_INTERNET_CONNECTION);&#10;                } else {&#10;                    tvNoData.setText(AppConstant.NO_DATA);&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" description="adding showNoData method" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denViewPagerAdapter" value="public class SectionsPagerAdapter extends FragmentPagerAdapter {&#10;    private final List&lt;Fragment&gt; mFragmentList = new ArrayList&lt;&gt;();&#10;    private final List&lt;String&gt; mFragmentTitleList = new ArrayList&lt;&gt;();&#10;&#10;    public SectionsPagerAdapter(FragmentManager fm) {&#10;        super(fm, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT);&#10;    }&#10;&#10;    public void addList(List&lt;ExamModel&gt; classModels) {&#10;        removePreviousData();&#10;        for (ExamModel classModel : classModels) {&#10;            Fragment fragment = StudyUtil.getFragmentByType(classModel);&#10;            addFrag(fragment, classModel.getName());&#10;        }&#10;    }&#10;&#10;    private void removePreviousData(){&#10;        mFragmentList.clear();&#10;        mFragmentTitleList.clear();&#10;    }&#10;&#10;    private void addFrag(Fragment fragment, String title) {&#10;        mFragmentList.add(fragment);&#10;        mFragmentTitleList.add(title);&#10;    }&#10;&#10;    @Override&#10;    @NonNull&#10;    public Fragment getItem(int position) {&#10;        return mFragmentList.get(position);&#10;    }&#10;&#10;    @Override&#10;    public int getCount() {&#10;        return mFragmentList.size();&#10;    }&#10;&#10;&#10;    @Override&#10;    public CharSequence getPageTitle(int position) {&#10;        return mFragmentTitleList.get(position);&#10;    }&#10;&#10;}" description="Create FragmentPagerAdapter Adapter Class" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denGetValidImagePath" value="public static String getImagePath(String imageBaseUrl, String photoUrl) {&#10;    String imageUrl = &quot;&quot;;&#10;    if (!TextUtils.isEmpty(photoUrl)) {&#10;        if (imageBaseUrl != null &amp;&amp; !photoUrl.startsWith(&quot;file://&quot;) &amp;&amp; !photoUrl.startsWith(&quot;http://&quot;) &amp;&amp; !photoUrl.startsWith(&quot;https://&quot;)) {&#10;            imageUrl = imageBaseUrl + photoUrl;&#10;        } else {&#10;            imageUrl = photoUrl;&#10;        }&#10;    }&#10;    return imageUrl;&#10;}" description="Adding base url if image doesnt contains http" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denAdapterMultiViews" value="import android.view.LayoutInflater;&#10;import android.view.ViewGroup;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import java.util.ArrayList;&#10;&#10;public class VideoListAdapter extends RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt; {&#10;    private final int mItemType;&#10;    private ArrayList&lt;HistoryModelResponse&gt; mList;&#10;&#10;    public VideoListAdapter(int mItemType, ArrayList&lt;HistoryModelResponse&gt; mList) {&#10;        this.mItemType = mItemType;&#10;        this.mList = mList;&#10;    }&#10;&#10;    public interface ItemType {&#10;        int ITEM_TYPE_GRID = 1;&#10;        int ITEM_TYPE_SCROLL = 0;&#10;    }&#10;&#10;    @Override&#10;    public int getItemViewType(int position) {&#10;        return mItemType;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {&#10;        if (i == SubCatAdapter.ItemType.ITEM_TYPE_GRID) {&#10;            return new GridViewHolder(LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.slot_video_grid, viewGroup, false));&#10;        } else {&#10;            return new ScrollViewHolder(LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.slot_video_scroll, viewGroup, false));&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder viewHolder, final int position) {&#10;        HistoryModelResponse item = mList.get(position);&#10;        if (viewHolder instanceof ScrollViewHolder) {&#10;            ScrollViewHolder holder = (ScrollViewHolder) viewHolder;&#10;            holder.tvName.setText(item.getName());&#10;        }else if (viewHolder instanceof GridViewHolder) {&#10;            GridViewHolder holder = (GridViewHolder) viewHolder;&#10;            try {&#10;                if(item.getName().contains(&quot; &quot;)){&#10;                    String[] mData = item.getName().split(&quot; &quot;);&#10;                    holder.tvHeader.setText(mData[0]);&#10;                    holder.tvName.setText(mData[1]);&#10;                }else {&#10;                    holder.tvName.setText(item.getName());&#10;                }&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return mList.size();&#10;    }&#10;&#10;    public static class ScrollViewHolder extends RecyclerView.ViewHolder {&#10;        private TextView tvName;&#10;&#10;        ScrollViewHolder(View view) {&#10;            super(view);&#10;            tvName = view.findViewById(R.id.tv_name);&#10;        }&#10;    }&#10;&#10;    public static class GridViewHolder extends RecyclerView.ViewHolder {&#10;        private TextView tvName;&#10;        private TextView tvHeader;&#10;&#10;        GridViewHolder(View view) {&#10;            super(view);&#10;            tvHeader = view.findViewById(R.id.tv_header);&#10;            tvName = view.findViewById(R.id.tv_name);&#10;        }&#10;    }&#10;}" description="Create new Adapter" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denFragmentHolderLayout" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;&#10;&#10;    &lt;FrameLayout&#10;        android:layout_above=&quot;@+id/rl_ad_banner&quot;&#10;        android:id=&quot;@+id/content&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&gt;&#10;    &lt;/FrameLayout&gt;&#10;&#10;    &lt;RelativeLayout&#10;        android:id=&quot;@+id/rl_ad_banner&quot;&#10;        android:layout_alignParentBottom=&quot;true&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;/&gt;&#10;&lt;/RelativeLayout&gt;" description="xml file for fragment holder activity." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="denFragmentHolderActivity" value="&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.text.TextUtils;&#10;import android.view.MenuItem; &#10;import androidx.appcompat.app.ActionBar;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.fragment.app.FragmentTransaction; &#10;&#10;&#10;public class FragmentHolderActivity extends AppCompatActivity {&#10;&#10;    private String title;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_frag_holder);&#10;        initFragment();&#10;    }&#10;&#10;    private void initFragment() {&#10;        final Bundle bundle = getIntent().getExtras();&#10;        if (bundle != null) {&#10;            title = bundle.getString(AppConstant.TITLE);&#10;&#10;            Runnable runnable = new Runnable() {&#10;                public void run() {&#10;                    Fragment fragment = new FragmentHolderFragment();&#10;                    fragment.setArguments(bundle);&#10;                    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();&#10;                    transaction.add(R.id.content, fragment);&#10;                    transaction.commitAllowingStateLoss();&#10;                }&#10;            };&#10;            new Handler().post(runnable);&#10;            setUpToolBar();&#10;        } else {&#10;            finish();&#10;        }&#10;    }&#10;&#10;    private void setUpToolBar() {&#10;        ActionBar actionBar = getSupportActionBar();&#10;        if (actionBar != null) {&#10;            actionBar.setDisplayHomeAsUpEnabled(true);&#10;            if (!TextUtils.isEmpty(title)) {&#10;                actionBar.setTitle(title);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(MenuItem item) {&#10;        int id = item.getItemId();&#10;        if( id == android.R.id.home ){&#10;            onBackPressed();&#10;            return true ;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    } &#10;}" description="Create Fragment holder Activity with ActionBar" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denNoDataFragment" value="&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import com.config.util.SupportUtil;&#10;import com.study.R;&#10;&#10;public class NoDataFragment extends Fragment {&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {&#10;        super.onCreateView(inflater, container, savedInstanceState);&#10;        return initView(inflater.inflate(R.layout.st_update_later, container, false));&#10;    }&#10;&#10;    private View initView(View view) {&#10;        if (view != null &amp;&amp; view.findViewById(R.id.btn_update) != null) {&#10;            view.findViewById(R.id.btn_update).setOnClickListener(new View.OnClickListener() {&#10;                @Override&#10;                public void onClick(View v) {&#10;                    if (getActivity() != null) {&#10;                        SupportUtil.rateUs(getActivity());&#10;                    }&#10;                }&#10;            });&#10;        }&#10;        return view;&#10;    } &#10;}&#10;" description="Create Fragment class" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denNoDataFragmentLayout" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:gravity=&quot;center&quot;&#10;    android:orientation=&quot;vertical&quot;&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btn_update&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        android:text=&quot;@string/update&quot;&#10;        android:textAllCaps=&quot;false&quot;&#10;        android:padding=&quot;@dimen/padding_16dp&quot;&#10;        android:background=&quot;@color/colorAccent&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;" description="Create xml source code" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="denSelectorDialogOrFragment" value="&#10;&#10;import android.content.Context;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;&#10;import androidx.recyclerview.widget.DefaultItemAnimator;&#10;import androidx.recyclerview.widget.GridLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.helper.callback.Response;&#10;import com.pdfviewer.R;&#10;&#10;import java.util.List;&#10;&#10;&#10;public class ExamClassSelector implements Response.OnClickListener&lt;String&gt; { &#10;    private BottomSheetDialog mBottomSheetDialog;&#10;    private ExamModel mItem;&#10;    private BoardSelectionType boardSelectionType;&#10;&#10;    public static ExamClassSelector newInstance(ExamModel mItem, BoardSelectionType boardSelectionType, Study.OnClickListener&lt;ExamModel&gt; mListener) {&#10;        ExamClassSelector fragment = new ExamClassSelector();&#10;        fragment.mItem = mItem;&#10;        fragment.boardSelectionType = boardSelectionType;&#10;        fragment.mListener = mListener;&#10;        return fragment;&#10;    }&#10;&#10;    public void show(Context context) {&#10;        if (context != null) {&#10;            mBottomSheetDialog = new BottomSheetDialog(context, R.style.BottomSheetDialog);&#10;            LayoutInflater inflater = LayoutInflater.from(context);&#10;            mBottomSheetDialog.setContentView(viewHolder(inflater.inflate(R.layout.study_fragment_class_selection, null)));&#10;            mBottomSheetDialog.show();&#10;        }&#10;    }&#10;&#10;    private View viewHolder(View v) {&#10;        RecyclerView mRecyclerView = v.findViewById(R.id.recycler_view);&#10;        View llNoData = v.findViewById(R.id.ll_no_data);&#10;        GridLayoutManager horizontalManager = new GridLayoutManager(v.getContext(), 2);&#10;&#10;        mRecyclerView.setLayoutManager(horizontalManager);&#10;        mRecyclerView.setItemAnimator(new DefaultItemAnimator());&#10;        if (mItem != null) {&#10;            if (mItem.getChildren() != null &amp;&amp; mItem.getChildren().size() &gt; 0) {&#10;                List&lt;ExamModel&gt; mList = mItem.getChildren();&#10;                ExamClassSelectionAdapter adapter = new ExamClassSelectionAdapter(mList, this);&#10;                mRecyclerView.setAdapter(adapter);&#10;                StudyUtil.showNoData(llNoData, View.GONE);&#10;            } else {&#10;                StudyUtil.showNoData(llNoData, View.VISIBLE);&#10;            }&#10;        }&#10;        v.findViewById(R.id.ll_change_board).setOnClickListener(view -&gt; {&#10;            if (mBottomSheetDialog != null) {&#10;                mBottomSheetDialog.dismiss();&#10;            }&#10;        });&#10;        return v;&#10;    }&#10;&#10;    @Override&#10;    public void onItemClicked(View view, ExamModel item) {&#10;        if (mBottomSheetDialog != null) {&#10;            mBottomSheetDialog.dismiss();&#10;        }&#10;        mListener.onItemClicked(view, item);&#10;        mBottomSheetDialog = null;&#10;    }&#10;&#10;}&#10;" description="Create BottomSheet Dialog or fragment" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denFragmentList" value="import android.app.Activity;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.helper.callback.Response;&#10;import com.pdfviewer.R;&#10;import com.pdfviewer.model.PDFBookmarkAdapter;&#10;import com.pdfviewer.model.PDFModel;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;&#10;public class PDFIndexFragment extends Fragment {&#10;&#10;    private View layoutNoData;&#10;    private PDFBookmarkAdapter adapter;&#10;    private List&lt;PDFModel&gt; mList = new ArrayList&lt;&gt;();&#10;    private Activity activity;&#10;&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&#10;        View view = inflater.inflate(R.layout.pdf_bookmark_activity, container, false);&#10;        activity = getActivity();&#10;        initView(view);&#10;        getIntentData();&#10;        return view;&#10;    }&#10;&#10;    private void getIntentData() {&#10;//        Bundle bundle = getArguments();&#10;//        if (bundle != null) {&#10;//            if (boardSelectionType == BoardSelectionType.TYPE_OPEN_CONTENT) {&#10;//                adapter.setAdapterType(boardSelectionType);&#10;//            }&#10;//        }&#10;    }&#10;&#10;    private void initView(View view) {&#10;        layoutNoData = findViewById(R.id.ll_no_data);&#10;        RecyclerView rvList = view.findViewById(R.id.rvList);&#10;        rvList.setLayoutManager(new LinearLayoutManager(activity, LinearLayoutManager.VERTICAL, false));&#10;        adapter = new PDFBookmarkAdapter(mList, new Response.OnClickListener&lt;PDFModel&gt;() {&#10;            @Override&#10;            public void onItemClicked(View view, PDFModel item) {&#10;&#10;            }&#10;        });&#10;        rvList.setAdapter(adapter);&#10;    }&#10;&#10;    private void loadList(List&lt;PDFModel&gt; list) {&#10;        BaseUtil.showNoData(layoutNoData, View.GONE);&#10;        mList.clear();&#10;        if (list != null &amp;&amp; list.size() &gt; 0) {&#10;            mList.addAll(list);&#10;        }&#10;        if (list == null || list.size() &lt;= 0) {&#10;            BaseUtil.showNoData(layoutNoData, View.VISIBLE);&#10;        }&#10;        adapter.notifyDataSetChanged();&#10;    }&#10;&#10;}" description="create fragment with list" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denFragmentListAdapter" value="&#10;import android.text.TextUtils;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.pdfviewer.R;&#10;import com.pdfviewer.util.PDFCallback;&#10;&#10;import java.util.List;&#10;&#10;public class PDFIndexAdapter extends RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt; {&#10;&#10;    private final PDFCallback.OnListClickListener&lt;PDFModel&gt; clickListener;&#10;    private List&lt;PDFModel&gt; mList;&#10;&#10;    @Override&#10;    @NonNull&#10;    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {&#10;        return new ViewHolder(LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.mcq_item_performance_test, parent, false));&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return mList == null ? 0 : mList.size();&#10;    }&#10;&#10;    public PDFIndexAdapter(List&lt;PDFModel&gt; mList, PDFCallback.OnListClickListener&lt;PDFModel&gt; clickListener) {&#10;        this.mList = mList;&#10;        this.clickListener = clickListener;&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull final RecyclerView.ViewHolder holder, int i) {&#10;        ViewHolder myViewHolder = (ViewHolder) holder;&#10;        myViewHolder.tvTitle.setText(mList.get(i).getTitle());&#10;        if(!TextUtils.isEmpty(mList.get(i).getBookmarkPages())) {&#10;            myViewHolder.tvPages.setText(&quot;Pages : &quot; + mList.get(i).getBookmarkPages());&#10;        }&#10;&#10;        if(!TextUtils.isEmpty(mList.get(i).getSubTitle())) {&#10;            myViewHolder.tvSubTitle.setText(mList.get(i).getSubTitle());&#10;            myViewHolder.tvSubTitle.setVisibility(View.VISIBLE);&#10;        }else {&#10;            myViewHolder.tvSubTitle.setVisibility(View.GONE);&#10;        }&#10;    }&#10;&#10;    private class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {&#10;&#10;        private TextView tvTitle;&#10;        private TextView tvSubTitle;&#10;        private TextView tvPages;&#10;&#10;        private ViewHolder(View v) {&#10;            super(v);&#10;            tvTitle = v.findViewById(R.id.tvTitle);&#10;            tvSubTitle = v.findViewById(R.id.tvSubTitle);&#10;            tvPages = v.findViewById(R.id.tvPages);&#10;&#10;            itemView.setOnClickListener(this);&#10;            v.findViewById(R.id.iv_delete).setOnClickListener(this);&#10;        }&#10;&#10;        @Override&#10;        public void onClick(View v) {&#10;            if (getAdapterPosition() &gt;= 0 &amp;&amp; getAdapterPosition() &lt; mList.size()) {&#10;                if (v.getId() == R.id.iv_delete) {&#10;                    clickListener.onDeleteClicked(v, getAdapterPosition(), mList.get(getAdapterPosition()));&#10;                } else {&#10;                    clickListener.onItemClicked(v, mList.get(getAdapterPosition()));&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;}" description="Create adapter class" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denFragmentListAdapterXml" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:card_view=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;    &lt;androidx.cardview.widget.CardView&#10;        android:id=&quot;@+id/card_view&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_margin=&quot;5dp&quot;&#10;        android:elevation=&quot;2dp&quot;&#10;        card_view:cardBackgroundColor=&quot;@color/themeBackgroundCardColor&quot;&#10;        card_view:cardCornerRadius=&quot;2dp&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/adp_v_indicator&quot;&#10;                android:layout_width=&quot;5dp&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:background=&quot;#00ba90&quot; /&gt;&#10;&#10;            &lt;RelativeLayout&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_gravity=&quot;center_vertical&quot;&#10;                android:layout_weight=&quot;1&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_toLeftOf=&quot;@+id/iv_delete&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;10dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvTitle&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:textColor=&quot;@color/themeTextColor&quot;&#10;                        android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvSubTitle&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:textColor=&quot;@color/themeHintColor&quot;&#10;                        android:layout_marginTop=&quot;5dp&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tvPages&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:textColor=&quot;@color/themeHintColor&quot;&#10;                        android:layout_marginTop=&quot;5dp&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;ImageView&#10;                    android:id=&quot;@+id/iv_delete&quot;&#10;                    android:layout_width=&quot;50dp&quot;&#10;                    android:layout_height=&quot;50dp&quot;&#10;                    android:layout_alignParentRight=&quot;true&quot;&#10;                    android:layout_centerInParent=&quot;true&quot;&#10;                    android:padding=&quot;10dp&quot;&#10;                    android:src=&quot;@drawable/ic_pdf_delete&quot; /&gt;&#10;            &lt;/RelativeLayout&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;&lt;/LinearLayout&gt;" description="create xml file" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="denSQLiteInsertUpdateQuery" value="public void insertDAILYUPDATES(List&lt;DailyUpdatesModel&gt; dailyUpdatesModels) {&#10;        if (!db.isOpen())&#10;            db = openDataBase();&#10;        try {&#10;            for (DailyUpdatesModel dailyUpdatesModel : dailyUpdatesModels) {&#10;                ContentValues contentValues = new ContentValues();&#10;                contentValues.put(ID, dailyUpdatesModel.getId());&#10;                contentValues.put(COLUMN_STATUS, dailyUpdatesModel.getCategory_id());&#10;                contentValues.put(COLUMN_TITLE, &quot;&quot; + dailyUpdatesModel.getTitle());&#10;                contentValues.put(COLUMN_DES, &quot;&quot; + dailyUpdatesModel.getDescription());&#10;                contentValues.put(COLUMN_UPDATE_AT, &quot;&quot; + dailyUpdatesModel.getUpdatedAt());&#10;                contentValues.put(COLUMN_IMAGE_PATH, &quot;&quot; + dailyUpdatesModel.getImage());&#10;                int c = db.update(TABLE_DAILY_UPDATES, contentValues, ID + &quot;=&quot; + dailyUpdatesModel.getId(), null);&#10;                if (c == 0)&#10;                    db.insert(TABLE_DAILY_UPDATES, null, contentValues);&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;&quot; + e);&#10;        }&#10;    }" description="If id exists than update else insert" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denMatchMultipleIdsQuery" value="    String where = COLUMN_FAV + &quot; != &quot; + AppConstant.TYPE_DELETE + &quot; AND &quot; + COLUMN_STATUS + &quot; IN (&quot; + categoryIds + &quot;)&quot;;&#10;    if ( !TextUtils.isEmpty(categoryIds) &amp;&amp;  categoryIds.equalsIgnoreCase(Constants.DAILY_UPDATES+&quot;&quot;) ) {&#10;        where = COLUMN_FAV + &quot; != &quot; + AppConstant.TYPE_DELETE;&#10;    }&#10;    cursor = db.query(TABLE_DAILY_UPDATES, null, where, null, null, null, COLUMN_ID + &quot; DESC&quot;);&#10;        " description="Find data by multiple ids check" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denFragmentListActivityXml" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/themeWindowBackground&quot;&gt;&#10;&#10;    &lt;androidx.coordinatorlayout.widget.CoordinatorLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_above=&quot;@+id/ad_view_top&quot;&gt;&#10;&#10;        &lt;androidx.recyclerview.widget.RecyclerView &#10;            android:id=&quot;@+id/recycler_view&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:paddingTop=&quot;8dp&quot;&gt;&#10;&#10;        &lt;/androidx.recyclerview.widget.RecyclerView&gt;&#10;&#10;        &lt;include layout=&quot;@layout/base_layout_no_data&quot; /&gt;&#10;    &lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;&#10;&#10;    &lt;RelativeLayout&#10;        android:id=&quot;@+id/ad_view_top&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_alignParentBottom=&quot;true&quot;&#10;        android:layout_centerHorizontal=&quot;true&quot; /&gt;&#10;&lt;/RelativeLayout&gt;" description="Create xml file contains list and no data" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="denReflectionClass" value="public class ReflectionClass&lt;T&gt; {&#10;&#10;    public MenuListener&lt;T&gt; mListener;&#10;    public T item;&#10;&#10;    public interface MenuListener&lt;T&gt; {&#10;        void onClick(T item);&#10;    }&#10;&#10;    public static &lt;T&gt; ReflectionClass&lt;T&gt; newInstance(MenuListener&lt;T&gt; listener, T itemProduct) {&#10;        ReflectionClass&lt;T&gt; reflectionClass = new ReflectionClass&lt;T&gt;();&#10;        reflectionClass.mListener = listener;&#10;        reflectionClass.item = itemProduct;&#10;        return reflectionClass;&#10;    }&#10;&#10;    public void onViewCreated(@NonNull View v) {&#10;        TextView tvTitle = v.findViewById(R.id.action_menu_title);&#10;&#10;        if (item != null &amp;&amp; item instanceof ProductModel) {&#10;            tvTitle.setText(((ProductModel) item).getProductName());&#10;        }&#10;        tvTitle.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                if (mListener != null) {&#10;                    mListener.onClick(item);&#10;                }&#10;            }&#10;        });&#10;    }&#10;}" description="Class code making by T object reference" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denActivityTrackingApplication" value="&#10;import android.app.Activity;&#10;import android.app.Application;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;&#10;&#10;public abstract class ActivityTrackingApplication extends Application implements Application.ActivityLifecycleCallbacks {&#10;&#10;    private final String TAG = ActivityTrackingApplication.class.getSimpleName();&#10;&#10;    public abstract boolean isDebugMode();&#10;&#10;    @Override&#10;    public void onCreate() {&#10;        super.onCreate();&#10;        if (isDebugMode()) {&#10;            registerActivityLifecycleCallbacks(this);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onActivityCreated(@NonNull Activity activity, @Nullable Bundle savedInstanceState) {&#10;        Log.d(TAG, activity.getClass().getSimpleName());&#10;    }&#10;&#10;    @Override&#10;    public void onActivityStarted(@NonNull Activity activity) {&#10;&#10;    }&#10;&#10;    @Override&#10;    public void onActivityResumed(@NonNull Activity activity) {&#10;&#10;    }&#10;&#10;    @Override&#10;    public void onActivityPaused(@NonNull Activity activity) {&#10;&#10;    }&#10;&#10;    @Override&#10;    public void onActivityStopped(@NonNull Activity activity) {&#10;&#10;    }&#10;&#10;    @Override&#10;    public void onActivitySaveInstanceState(@NonNull Activity activity, @NonNull Bundle outState) {&#10;&#10;    }&#10;&#10;    @Override&#10;    public void onActivityDestroyed(@NonNull Activity activity) {&#10;&#10;    }&#10;}" description="Create Class ActivityTrackingApplication" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denAddListenerSdk" value="private final ArrayList&lt;PDFCallback.StatsListener&gt; mStatsCallbacks = new ArrayList&lt;&gt;();&#10;&#10;public PDFViewer addStatisticsCallbacks(PDFCallback.StatsListener callback) {&#10;    synchronized (mStatsCallbacks) {&#10;        mStatsCallbacks.add(callback);&#10;    }&#10;    return this;&#10;}&#10;&#10;public void removeStatisticsCallbacks(PDFCallback.StatsListener callback) {&#10;    synchronized (mStatsCallbacks) {&#10;        mStatsCallbacks.remove(callback);&#10;    }&#10;}&#10;&#10;public void dispatchStatsUpdated() {&#10;    for (PDFCallback.StatsListener callback : mStatsCallbacks) {&#10;        callback.onStatsUpdated();&#10;    }&#10;}" description="add Arraylist of listener in Application or Sdk class" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denKeyboardHideShow" value="public static void showKeyboard(View view) {&#10;    try {&#10;        if (view != null &amp;&amp; view.requestFocus()) {&#10;            InputMethodManager imm = (InputMethodManager)&#10;                    view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);&#10;            if(imm!=null) {&#10;                imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, 0);&#10;            }&#10;        }&#10;    } catch (Exception e) {&#10;        e.printStackTrace();&#10;    }&#10;}&#10;public static void hideKeyboard(Activity activity) {&#10;    try {&#10;        if(activity != null) {&#10;            InputMethodManager imm = (InputMethodManager) activity.getSystemService(Context.INPUT_METHOD_SERVICE);&#10;            View f = activity.getCurrentFocus();&#10;            if (null != f &amp;&amp; null != f.getWindowToken() &amp;&amp; EditText.class.isAssignableFrom(f.getClass()))&#10;                imm.hideSoftInputFromWindow(f.getWindowToken(), 0);&#10;            else&#10;                activity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);&#10;        }&#10;    } catch (Exception e) {&#10;        e.printStackTrace();&#10;    }&#10;}" description="Keyboard hide and show methods" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denConfigNetworkListener" value="private void loadDataFromServer() {&#10;&#9;if (!MCQUtil.isConnected(activity)) {&#10;&#9;&#9;MCQUtil.showNoData(viewNoData, View.VISIBLE);&#10;&#9;&#9;if (MCQSdk.getInstance().getConfigManager() != null)&#10;&#9;&#9;&#9;MCQSdk.getInstance().getConfigManager().getNetworkMonitor().setConnectivityListener(this.hashCode(), new ConnectivityListener() {&#10;&#9;&#9;&#9;&#9;@Override&#10;&#9;&#9;&#9;&#9;public void onNetworkStateChanged(boolean isConfigLoaded, boolean isConnected) {&#10;&#9;&#9;&#9;&#9;&#9;if (isConfigLoaded &amp;&amp; isConnected) {&#10;&#9;&#9;&#9;&#9;&#9;&#9;loadDataFromServer();&#10;&#9;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;&#9;}&#10;&#9;&#9;&#9;});&#10;&#9;} else {&#10;&#9;&#9;networkUtil.fetchUserPerformanceData(userId);&#10;&#9;}&#10;}&#10;&#10;@Override&#10;public void onDestroy() {&#10;&#9;super.onDestroy();&#10;&#9;if (MCQSdk.getInstance().getConfigManager() != null) {&#10;&#9;&#9;MCQSdk.getInstance().getConfigManager().getNetworkMonitor().removeConnectivityListener(this.hashCode());&#10;&#9;}&#10;}" description="add network change listener before API call request" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denAdapterWithFilter" value="import android.graphics.Color;&#10;import android.text.Spannable;&#10;import android.text.style.ForegroundColorSpan;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Filter;&#10;import android.widget.Filterable;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.helper.callback.Response;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;import letest.ncertbooks.R;&#10;import letest.ncertbooks.model.FilterModel;&#10;&#10;public class FilterAdapter extends RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt; implements Filterable {&#10;    private final List&lt;FilterModel&gt; mList;&#10;    private final Response.OnClickListener&lt;FilterModel&gt; mCallback;&#10;    public final ArrayList&lt;FilterModel&gt; tempList;&#10;    private String searchText;&#10;&#10;    public FilterAdapter(List&lt;FilterModel&gt; mList, Response.OnClickListener&lt;FilterModel&gt; mCallback) {&#10;        this.mList = mList;&#10;        this.mCallback = mCallback;&#10;        this.tempList = new ArrayList&lt;&gt;(mList);&#10;    }&#10;&#10;    /**&#10;     * @param list : update this list when new items added in main list.&#10;     */&#10;    public void updateFilterList(List&lt;FilterModel&gt; list) {&#10;        tempList.clear();&#10;        tempList.addAll(list);&#10;    }&#10;    /**&#10;     * mRefreshListener : used for update no data TextView&#10;     */&#10;    private ListRefreshListener mRefreshListener;&#10;&#10;    @NonNull&#10;    @Override&#10;    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {&#10;        return new ViewHolder(LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.slot_filter, viewGroup, false));&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, final int position) {&#10;        FilterModel item = mList.get(position);&#10;        if (holder instanceof ViewHolder) {&#10;            ViewHolder viewHolder = (ViewHolder) holder;&#10;            viewHolder.tvTitle.setText(item.getTitle());&#10;&#10;            highlightText(viewHolder, item.getTitle());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return mList == null ? 0 : mList.size();&#10;    }&#10;&#10;    public void setSearchQuery(String searchText) {&#10;        this.searchText = searchText.toLowerCase(Locale.getDefault());&#10;    }&#10;&#10;    public class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {&#10;        private final TextView tvTitle;&#10;&#10;        ViewHolder(View view) {&#10;            super(view);&#10;            tvTitle = view.findViewById(R.id.tv_title);&#10;            itemView.setOnClickListener(this);&#10;        }&#10;&#10;        @Override&#10;        public void onClick(View v) {&#10;            if(getAdapterPosition() &gt;= 0 &amp;&amp; getAdapterPosition() &lt; mList.size()) {&#10;                mCallback.onItemClicked(v, mList.get(getAdapterPosition()));&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public Filter getFilter() {&#10;        return filter;&#10;    }&#10;&#10;    private final Filter filter = new Filter() {&#10;        @Override&#10;        protected FilterResults performFiltering(CharSequence constraint) {&#10;            List&lt;FilterModel&gt; filteredList = new ArrayList&lt;&gt;();&#10;            if (constraint == null || constraint.length() == 0) {&#10;                filteredList.addAll(tempList);&#10;            } else {&#10;                String filterPattern = constraint.toString().toLowerCase().trim();&#10;                for (FilterModel item : tempList) {&#10;                    if (item.getTitle().toLowerCase().contains(filterPattern)) {&#10;                        filteredList.add(item);&#10;                    }&#10;                }&#10;            }&#10;            FilterResults results = new FilterResults();&#10;            results.values = filteredList;&#10;            return results;&#10;        }&#10;        @Override&#10;        protected void publishResults(CharSequence constraint, FilterResults results) {&#10;            try {&#10;                mList.clear();&#10;                notifyDataSetChanged();&#10;                if (results.values != null) {&#10;                    mList.addAll((List&lt;FilterModel&gt;) results.values);&#10;                    notifyDataSetChanged();&#10;                }&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;            }&#10;            if(mRefreshListener != null){&#10;                mRefreshListener.onListRefreshed(getItemCount());&#10;            }&#10;        }&#10;    };&#10;&#10;    /**&#10;     * @param mRefreshListener : used for update no data TextView&#10;     */&#10;    public FilterAdapter addListRefreshListener(ListRefreshListener mRefreshListener) {&#10;        this.mRefreshListener = mRefreshListener;&#10;        return this;&#10;    }&#10;&#10;    public interface ListRefreshListener{&#10;        void onListRefreshed(int itemCount);&#10;    }&#10;&#10;    private void highlightText(ViewHolder holder, String title) {&#10;        try {&#10;            String mTitle = title.toLowerCase(Locale.getDefault());&#10;            Spannable spanText = Spannable.Factory.getInstance()&#10;                    .newSpannable(holder.tvTitle.getText()); // &lt;- EDITED: Use the original string, as `country` has been converted to lowercase.&#10;            if(searchText == null){&#10;                return;&#10;            }&#10;            String[] searchWords = searchText.split(&quot; &quot;);&#10;            for (String item : searchWords){&#10;                if (mTitle.contains(item)) {&#10;                    int startPos = mTitle.indexOf(item);&#10;                    int endPos = startPos + item.length();&#10;&#10;                    spanText.setSpan(&#10;                            new ForegroundColorSpan(Color.parseColor(&quot;#E8970F&quot;)),&#10;                            startPos,&#10;                            endPos,&#10;                            Spannable.SPAN_EXCLUSIVE_EXCLUSIVE&#10;                    );&#10;                    holder.tvTitle.setText(spanText, TextView.BufferType.SPANNABLE);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}" description="Create Adapter with filter option" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denModelToJsonMethod" value="public String toJson(boolean excludeFieldsWithoutExposeAnnotation) {&#10;    if(excludeFieldsWithoutExposeAnnotation){&#10;        return GsonParser.toJson(this, new TypeToken&lt;ModelName&gt;() {});&#10;    }else {&#10;        return GsonParser.getGson().toJson(this, ModelName.class);&#10;    }&#10;}" description="Create toJson method in model class" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denGetInstanceMethod" value="@SuppressLint(&quot;StaticFieldLeak&quot;)&#10;private static AppStatsManager sSoleInstance;&#10;&#10;private AppStatsManager(Context context) {&#10;    this.context = context;&#10;}&#10;&#10;public static AppStatsManager getInstance(Context context) {&#10;    if (sSoleInstance == null) {&#10;        synchronized (AppStatsManager.class) {&#10;            if (sSoleInstance == null) sSoleInstance = new AppStatsManager(context);&#10;        }&#10;    }&#10;    return sSoleInstance;&#10;}" description="Create getInstance method under class" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denAlertDialog" value="AlertDialog.Builder builder = new AlertDialog.Builder(context, R.style.DialogTheme);&#10;builder.setMessage(message)&#10;        .setCancelable(false)&#10;        .setPositiveButton(positiveButton, new DialogInterface.OnClickListener() {&#10;            public void onClick(DialogInterface dialog, int id) {&#10;                callback.onItemClicked(new View(context), null);&#10;                dialog.dismiss();&#10;                dialog.cancel();&#10;            }&#10;        })&#10;        .setNegativeButton(negativeButton, new DialogInterface.OnClickListener() {&#10;            @Override&#10;            public void onClick(DialogInterface dialog, int which) {&#10;                dialog.dismiss();&#10;                dialog.cancel();&#10;            }&#10;        });&#10;AlertDialog alert = builder.create();&#10;alert.setTitle(title);&#10;alert.show();" description="Create Alert Dialog methods" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denMenuSearchViewClickListener" value="    @Override&#10;    public boolean onCreateOptionsMenu(Menu menu) {&#10;        getMenuInflater().inflate(R.menu.share_filter, menu);&#10;        MenuItem searchViewItem = menu.findItem(R.id.app_bar_search);&#10;        final SearchView searchView = (SearchView) searchViewItem.getActionView();&#10;        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {&#10;            @Override&#10;            public boolean onQueryTextSubmit(String query) {&#10;                searchView.clearFocus();&#10;                return false;&#10;            }&#10;&#10;            @Override&#10;            public boolean onQueryTextChange(String newText) {&#10;                adapter.setFilterType(mFilterType);&#10;                adapter.setSearchQuery(newText);&#10;                adapter.getFilter().filter(newText);&#10;                return false;&#10;            }&#10;        });&#10;        return true;&#10;    }" description="Actionbar SearchView click listener" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denSaveItemListFormInSharedPref" value="&#10;import android.content.Context;&#10;import android.text.TextUtils;&#10;&#10;import androidx.annotation.MainThread;&#10;import androidx.annotation.Nullable;&#10;&#10;import com.config.config.ConfigManager;&#10;import com.config.config.ConfigPreferences;&#10;import com.google.gson.reflect.TypeToken;&#10;import com.helper.util.GsonParser;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class MultiArticleManager {&#10;&#10;    public static void saveData(Context context, long timeInMillis) {&#10;        if(ConfigManager.getInstance().isEnableStatistics()) {&#10;            String previousData = updateList(context, timeInMillis);&#10;            if(!TextUtils.isEmpty(previousData)) {&#10;                AppPreferences.setMultiArticleClickedData(context, previousData);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Nullable&#10;    public static List&lt;Long&gt; getData(Context context) {&#10;        return GsonParser.fromJson(AppPreferences.getMultiArticleClickedData(context), new TypeToken&lt;List&lt;Long&gt;&gt;() {});&#10;    }&#10;&#10;    @MainThread&#10;    public static void clear(Context context) {&#10;        if(ConfigPreferences.isEnableStatistics(context)) {&#10;            AppPreferences.setMultiArticleClickedData(context, &quot;&quot;);&#10;        }&#10;    }&#10;&#10;    private static String updateList(Context context, long timeInMillis) {&#10;        List&lt;Long&gt; value = GsonParser.fromJson((AppPreferences.getMultiArticleClickedData(context)), new TypeToken&lt;List&lt;Long&gt;&gt;() {});&#10;        if(value == null){&#10;            value = new ArrayList&lt;&gt;();&#10;        }&#10;        boolean isArticleNotExist = true ;&#10;        for ( Long articleStatsModel : value ){&#10;            if (articleStatsModel == timeInMillis){&#10;                isArticleNotExist = false ;&#10;            }&#10;        }&#10;        if ( isArticleNotExist ) {&#10;            value.add(timeInMillis);&#10;        }&#10;        if(value.size() == 0){&#10;            return &quot;&quot;;&#10;        }else {&#10;            return GsonParser.toJson(value, new TypeToken&lt;List&lt;Long&gt;&gt;() {});&#10;        }&#10;    }&#10;}&#10;" description="Create Class for Save item in form of list in Shared Preference" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denCreateMenuInFragment" value="@Override&#10;public void onCreate(@Nullable Bundle savedInstanceState) {&#10;    super.onCreate(savedInstanceState);&#10;    setHasOptionsMenu(true);&#10;}&#10;&#10;@Override&#10;public void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {&#10;    inflater.inflate(R.menu.search_menu, menu);&#10;//    MenuItem testingMenu = menu.findItem(R.id.action_testing);&#10;    super.onCreateOptionsMenu(menu, inflater);&#10;}&#10;&#10;@Override&#10;public boolean onOptionsItemSelected(MenuItem item) {&#10;    int id = item.getItemId();&#10;    if (id == android.R.id.home) {&#10;        if (activity != null) {&#10;            activity.onBackPressed();&#10;        }&#10;        return true;&#10;    }&#10;    if (id == R.id.action_downloaded) {&#10;&#10;    } else if (id == R.id.action_testing) {&#10;&#10;    }&#10;    return super.onOptionsItemSelected(item);&#10;}" description="Create menu methods in Fragment class" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denOnCreateMethod" value="@Override&#10;protected void onCreate(Bundle savedInstanceState) {&#10;    super.onCreate(savedInstanceState);&#10;    setContentView(R.layout.activity_frag_holder);&#10;    getArguments();&#10;    initViews();&#10;    loadData();&#10;}&#10;&#10;private void getArguments() {&#10;    final Bundle bundle = getIntent().getExtras();&#10;    if (bundle != null) {&#10;        title = bundle.getString(AppConstant.TITLE);&#10;&#10;    } else {&#10;        finish();&#10;    }&#10;}&#10;&#10;private void initViews() {&#10;    TextView tvMessage = findViewById(R.id.tv_message);&#10;}&#10;&#10;private void loadData() {&#10;    &#10;}" description="onCreateMethod with arguments, initUi, loadData methods" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denCreateMenuInActivity" value="@Override&#10;public boolean onCreateOptionsMenu(Menu menu) { &#10;    getMenuInflater().inflate(R.menu.menu_main, menu);&#10;    return true;&#10;}&#10;&#10;@Override&#10;public boolean onOptionsItemSelected(MenuItem item) {&#10;    int itemId = item.getItemId();&#10;    if (itemId == android.R.id.home) {&#10;        onBackPressed();&#10;        finish();&#10;    } else if (itemId == R.id.action_share) {&#10;        SupportUtil.share(&quot;&quot;, this);&#10;    } else if (itemId == R.id.action_rateUs) {&#10;        SupportUtil.rateUs(this);&#10;    }&#10;    return super.onOptionsItemSelected(item);&#10;}" description="Create menu methods in Activity class" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denReflectionMethodCall" value="public void callMethodByReflection(Object obj){&#10;    try {&#10;        Class&lt;?&gt; objClass = obj.getClass();&#10;&#10;        Field[] fields = objClass.getFields();&#10;        Method[] methods = objClass.getDeclaredMethods();&#10;        Method m = objClass.getMethod(&quot;getAppStatistics&quot;);&#10;        Object mData = m.invoke(obj);&#10;    } catch (SecurityException e) {&#10;        e.printStackTrace();&#10;        Log.d(&quot;@Test&quot;,e.toString());&#10;    } catch (IllegalAccessException e) {&#10;        e.printStackTrace();&#10;        Log.d(&quot;@Test&quot;,e.toString());&#10;    } catch (Exception e) {&#10;        e.printStackTrace();&#10;        Log.d(&quot;@Test&quot;,e.toString());&#10;    }&#10;}" description="Reflection Method" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denReflectionMethodCall2" value="private void callMethodByReflection(){&#10;    try {&#10;        Method method = HomeListData.class.getMethod(&quot;methodName&quot;);&#10;        Object o = method.invoke(null);&#10;        if (o instanceof Collection&lt;?&gt;) {&#10;            List list = (List) o;&#10;            if (list.size() &gt; 0 &amp;&amp; list.get(0) instanceof ClassModel) {&#10;                for (Object classModel : list) {&#10;                    if (classModel instanceof ClassModel) {&#10;                        classModels.add((ClassModel) classModel);&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    } catch (NoSuchMethodException e) {&#10;        e.printStackTrace();&#10;    } catch (IllegalAccessException e) {&#10;        e.printStackTrace();&#10;    } catch (InvocationTargetException e) {&#10;        e.printStackTrace();&#10;    }finally {&#10;        if ( classModels == null || classModels.size() &lt; 1 ){&#10;            Toast.makeText(this,&quot;Function Not Found&quot;,Toast.LENGTH_SHORT).show();&#10;            finish();&#10;        }&#10;    }&#10;}" description="Reflection method find List" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denGsonExcludeFields" value="    public void setListHashMap(HashMap&lt;String, List&lt;CategoryProperty&gt;&gt; listHashMap) {&#10;        this.listHashMap = listHashMap;&#10;        Gson gson = new GsonBuilder()&#10;                .setExclusionStrategies(new TestExclStrategy())&#10;                .serializeNulls() //&lt;-- uncomment to serialize NULL fields as well&#10;                .create();&#10;        String jsonData = gson.toJson(listHashMap, new TypeToken&lt;HashMap&lt;String, List&lt;CategoryProperty&gt;&gt;&gt;() {&#10;        }.getType());&#10;        Log.d(&quot;@Test&quot;, jsonData);&#10;    }&#10;&#10;    public class TestExclStrategy implements ExclusionStrategy {&#10;&#10;        public boolean shouldSkipClass(Class&lt;?&gt; arg0) {&#10;            return false;&#10;        }&#10;&#10;        public boolean shouldSkipField(FieldAttributes f) {&#10;            return (&#10;                    f.getName().equals(&quot;subCatId&quot;) ||&#10;                    f.getName().equals(&quot;imageResId&quot;) ||&#10;                    f.getName().equals(&quot;position&quot;) ||&#10;                    f.getName().equals(&quot;isTimer&quot;) ||&#10;                    f.getName().equals(&quot;isLoadUI&quot;) ||&#10;                    f.getName().equals(&quot;isUseImageResId&quot;) ||&#10;                    f.getName().equals(&quot;imageRes&quot;) ||&#10;                    f.getName().equals(&quot;titleRes&quot;) ||&#10;                    f.getName().equals(&quot;query&quot;) ||&#10;                    f.getName().equals(&quot;isCategoryOffline&quot;));&#10;&#10;        }&#10;    }" description="gsonExcludeFields" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denCustomViewsClass" value="public class BottomBarDesign {&#10;&#10;    private final ImageView[] graphic = new ImageView[4];&#10;&#10;    public BottomBarDesign(Activity activity) {&#10;        View rootView = activity.getWindow().getDecorView().getRootView();&#10;        graphic[0] = rootView.findViewById(R.id.graphic_menu_1);&#10;        graphic[1] = rootView.findViewById(R.id.graphic_menu_2);&#10;        graphic[2] = rootView.findViewById(R.id.graphic_menu_3);&#10;        graphic[3] = rootView.findViewById(R.id.graphic_menu_4);&#10;    }&#10;&#10;    public void setSelection(int selection) {&#10;        for (int i = 0; i &lt; graphic.length; i++){&#10;            graphic[i].setVisibility(i == selection ? View.VISIBLE : View.INVISIBLE);&#10;        }&#10;    }&#10;}" description="View class for custom desing" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denGsonModelFromJson" value="public &lt;T&gt; T fromJson(Class&lt;T&gt; classOfT) {&#10;    return GsonParser.getGson().fromJson(otherProperties, classOfT);&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denGsonModelToJson" value="public String toJson(boolean excludeFieldsWithoutExposeAnnotation) {&#10;    if(excludeFieldsWithoutExposeAnnotation){&#10;        return GsonParser.toJson(this, new TypeToken&lt;ModelName&gt;() {});&#10;    }else {&#10;        return GsonParser.getGson().toJson(this, ModelName.class);&#10;    }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denListSpanSizeLookup" value="GridLayoutManager layoutManager = new GridLayoutManager(context, 6);&#10;layoutManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {&#10;    @Override&#10;    public int getSpanSize(int pos) {&#10;        return getSpanCount(getAdapterPosition(), pos);&#10;    }&#10;});&#10;&#10;private int getSpanCount(int parentPos, int pos) {&#10;    if(getSubItemCount(parentPos) == 1){&#10;        return 6;&#10;    }else if(getSubItemCount(parentPos) == 2){&#10;        return 3;&#10;    }&#10;    return 2;&#10;}" description="Customize List Layout Manager" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denCustomViewsClassTag" value="public class BottomBarCustom {&#10;&#10;    private final View[] graphic = new View[5];&#10;&#10;    public BottomBarCustom(Activity activity) {&#10;        View rootView = activity.getWindow().getDecorView().getRootView();&#10;        for (int i = 0; i &lt; graphic.length; i++){&#10;            graphic[i] = rootView.findViewWithTag(i + &quot;&quot;);&#10;        } &#10;    }&#10;&#10;    public void setSelection(int selection) {&#10;        for (int i = 0; i &lt; graphic.length; i++){&#10;            if(graphic[i] != null) {&#10;                graphic[i].setVisibility(i == selection ? View.VISIBLE : View.INVISIBLE);&#10;            }&#10;        }&#10;    }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denMenuMethodActivity" value="    @Override&#10;    public boolean onCreateOptionsMenu(Menu menu) {&#10;        getMenuInflater().inflate(R.menu.menu_share, menu);&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(MenuItem item) {&#10;        int id = item.getItemId();&#10;        if (id == android.R.id.home) {&#10;            onBackPressed();&#10;            return true;&#10;        } else if (id == R.id.action_share) {&#10;            MCQUtil.share(&quot;&quot;, this);&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="denHashMapItrator" value="for (Map.Entry&lt;String,String&gt; entry : hashMap.entrySet()) {&#10;  String key = entry.getKey();&#10;  String value = entry.getValue();&#10;  // do stuff&#10;}" description="Print all Hashmap kev values pair" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
</templateSet>